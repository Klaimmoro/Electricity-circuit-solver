use indexmap::IndexMap;
use crate::{algorithm::gaussian_elimination::GaussianElimination, kernel::{circuit::circuit::Circuit, entities::{equation::Equation, expression::Expression}}};
///
/// Struct that realize MNA (modified nodal analysis)
pub struct MNA {
    _dbgid: String,
    /// where store String equation's generated by MNA
    equations: Vec<Equation>,
    /// where store result of solved matrix by Gaussian
    result: IndexMap<String,f32>,
    circuit: Circuit,
}
//
//
impl MNA {
    ///
    /// Struct constructor
    pub fn new(circuit: Circuit) -> Self {
        Self { 
            _dbgid: String::from("MNA"), 
            equations: Vec::new(),
            result: IndexMap::new(),
            circuit,
        }
    }
    ///
    /// Method to solve circuit by MNA
    pub fn solve(&mut self) -> IndexMap<String,f32> {
        self.equations = self.equations();
        let mut x: Vec<IndexMap<String,f32>> = Vec::new();
        let mut a: Vec<IndexMap<String,f32>> = Vec::new();
        let mut right_row_map: IndexMap<String,f32> = IndexMap::new();
        for equation in self.equations.iter() {
            let mut left_row_map: IndexMap<String,f32> = IndexMap::new();
            for variable in &self.result {
                equation.left_side
                    .iter()
                    .filter(|expr| expr.numerator[1..] == *variable.0)
                    .for_each(|expr| {
                        left_row_map
                            .entry(variable.0.clone())
                            .and_modify(|val | *val += 1.0/expr.denominator)
                            .or_insert(1.0/expr.denominator);
                });
                if !left_row_map.contains_key(variable.0) {
                    left_row_map.insert(variable.0.clone(), 0.0);
                }
            }
            if equation.right_side.len()== 1 && equation.right_side[0].numerator == "0" {
                right_row_map.insert(right_row_map.len().to_string(), 0.0);
            } else {
                for right_side in equation.right_side.iter() {
                    println!("{:?}",equation.right_side);
                    right_row_map.entry(right_side.numerator.clone()).and_modify(|val | *val += right_side.denominator).or_insert(right_side.denominator);
                }
            }
            a.push(left_row_map);
        }
        x.push(right_row_map);
        let mut coeffs: Vec<Vec<f32>> = Vec::new();
        let mut constants: Vec<f32> = Vec::new();  
        for vec in a.iter() {
            println!("{:?}",vec);
            let row: Vec<f32> = vec.values().cloned().collect();
            coeffs.push(row);
        }
        for vec in x.iter() {
            println!("{:?}",vec);
            for (_, value) in vec.iter() {
                constants.push(*value);
            }
        }
        println!("{:?}",constants);    
        let mut matrix = coeffs.clone();
        println!("{:?}",matrix);
        let n = coeffs.len();
        for i in 0..n {
            matrix[i].push(constants[i]);
        } 
        let solution = GaussianElimination::gaussian_elimination(&mut matrix);
        let keys: Vec<String> = self.result.keys().cloned().collect();
        for (i, key) in keys.iter().enumerate() {
            if i < solution.len() {
                self.result.insert(key.clone(), solution[i]);
            }
        }
        self.result.clone()
    }
    ///
    /// Method to generate equations by MNA
    fn equations(&mut self) -> Vec<Equation> {
        for node in &self.circuit.nodes {
            self.result.entry(node.id.clone()).or_insert(0.0);
            println!("{:?}",self.result);
            let mut equation: Equation = Equation::new();
            for element in &node.elements {
                match element {
                    crate::kernel::elements::element_type::ElementType::Resistor(resistor) => {
                        if resistor.connection.from == node.id {
                            if resistor.connection.to == "Ground" {
                                equation.left_side.push(
                                    Expression {
                                        numerator: format!("+{}",node.id),
                                        denominator: resistor.resistance,
                                    }
                                );
                            } else if resistor.connection.from == "Ground" {
                                equation.left_side.push(
                                    Expression {
                                        numerator: format!("+{}",node.id),
                                        denominator: resistor.resistance,
                                    }
                                );
                                equation.left_side.push(
                                    Expression {
                                        numerator: format!("-{}",resistor.connection.to),
                                        denominator: -resistor.resistance,
                                    }
                                );
                            } else {
                                equation.left_side.push(
                                    Expression {
                                        numerator: format!("+{}",node.id),
                                        denominator: resistor.resistance,
                                    }
                                );
                                equation.left_side.push(
                                    Expression {
                                        numerator: format!("-{}",resistor.connection.to),
                                        denominator: -resistor.resistance,
                                    }
                                );
                            }
                        } else {
                            if resistor.connection.from == "Ground" {
                                equation.left_side.push(
                                    Expression {
                                        numerator: format!("+{}",node.id),
                                        denominator: resistor.resistance,
                                    }
                                );
                            } else if resistor.connection.to== "Ground" {
                                equation.left_side.push(
                                    Expression {
                                        numerator: format!("+{}",node.id),
                                        denominator: resistor.resistance,
                                    }
                                );
                                equation.left_side.push(
                                    Expression {
                                        numerator: format!("-{}",resistor.connection.from),
                                        denominator: -resistor.resistance,
                                    }
                                );
                            } else {
                                equation.left_side.push(
                                    Expression {
                                        numerator: format!("+{}",node.id),
                                        denominator: resistor.resistance,
                                    }
                                );
                                equation.left_side.push(
                                    Expression {
                                        numerator: format!("-{}",resistor.connection.from),
                                        denominator: -resistor.resistance,
                                    }
                                );
                            }
                        }
                    },
                    crate::kernel::elements::element_type::ElementType::Inductor(_inductor) => {
                        
                    },
                    crate::kernel::elements::element_type::ElementType::Capacitor(_capacitor) => {

                    },
                    crate::kernel::elements::element_type::ElementType::VoltageSourceAC(_voltage_source_ac) => {
    
                    },
                    crate::kernel::elements::element_type::ElementType::VoltageSourceDC(voltage_source_dc) => {
                        self.result.entry(voltage_source_dc.id.clone()).or_insert(0.0);
                        if voltage_source_dc.connection.from == "Ground" {
                            let eq = Equation {
                                left_side: 
                                    vec![
                                        Expression { 
                                            numerator: format!("-{}",voltage_source_dc.connection.to), 
                                            denominator: -1.0 
                                        }
                                    ],
                                right_side: 
                                    vec![
                                        Expression { 
                                            numerator: format!("+{}",voltage_source_dc.id), 
                                            denominator: voltage_source_dc.voltage
                                        }
                                    ],
                            };
                            if !self.equations.contains(&eq) {
                                self.equations.push(eq);
                            };
                        } else if voltage_source_dc.connection.to == "Ground" {
                            let eq = Equation {
                                left_side: 
                                    vec![
                                        Expression { 
                                            numerator: format!("+{}",voltage_source_dc.connection.from), 
                                            denominator: 1.0 
                                        }
                                    ],
                                right_side: 
                                    vec![
                                        Expression { 
                                            numerator: format!("+{}",voltage_source_dc.id), 
                                            denominator: voltage_source_dc.voltage
                                        }
                                    ],
                            };
                            if !self.equations.contains(&eq) {
                                self.equations.push(eq)
                            }
                        } else {
                            let eq = Equation {
                                left_side: 
                                    vec![
                                        Expression { 
                                            numerator: format!("+{}",voltage_source_dc.connection.from), 
                                            denominator: 1.0 
                                        },
                                        Expression { 
                                            numerator: format!("-{}",voltage_source_dc.connection.to), 
                                            denominator: -1.0 
                                        }
                                    ],
                                right_side: 
                                    vec![
                                        Expression { 
                                            numerator: format!("+{}",voltage_source_dc.id), 
                                            denominator: voltage_source_dc.voltage
                                        }
                                    ],
                            };
                            if !self.equations.contains(&eq) {
                                self.equations.push(eq)
                            }
                        }
                        if voltage_source_dc.connection.from == node.id {
                            equation.left_side.push(
                                Expression {
                                    numerator: format!("+{}",voltage_source_dc.id),
                                    denominator: 1.0,
                                }
                            )
                        } else {
                            equation.left_side.push(
                                Expression {
                                    numerator: format!("-{}",voltage_source_dc.id),
                                    denominator: -1.0,
                                }
                            )
                        }
                    },
                    crate::kernel::elements::element_type::ElementType::CurrentSourceAC(_current_source_ac) => {

                    },
                    crate::kernel::elements::element_type::ElementType::CurrentSourceDC(current_source_dc) => {
                        if current_source_dc.connection.to == node.id {
                            equation.right_side.push(
                                Expression {
                                    numerator: format!("-{}",current_source_dc.id),
                                    denominator: -current_source_dc.currence,
                                }
                            )
                        } else {
                            equation.right_side.push(
                                Expression {
                                    numerator: format!("+{}",current_source_dc.id),
                                    denominator: current_source_dc.currence,
                                }
                            )
                        }

                    },
                }
            }
            if equation.right_side.is_empty() { 
                equation.right_side.push(
                    Expression {
                        numerator: format!("0"),
                        denominator: 0.0,
                    }
                )
            }
            self.equations.push(equation);
        }
        for equation in &self.equations {
            println!("{:?}",equation);
        }

        self.equations.clone()
    }        
}